buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
        springBootGradleVersion = '1.2.7.RELEASE'
    }
        
    repositories {        
        maven {
            url "${artifactory_contextUrl}/plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
            name = "maven-main-cache"
        }
    }
    
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"         
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootGradleVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'docker'


artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    resolve {
        repository {
            repoKey = 'libs-release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = 'org.paycode.Application'

jar {
    baseName = 'insurers-api'
    version =  '0.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.cloud:spring-cloud-starter-config")
    compile("org.springframework.cloud:spring-cloud-starter-eureka")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-actuator")


    //added JXM
    compile("org.jolokia:jolokia-core")
    compile("com.netflix.hystrix:hystrix-javanica")

    //security dependencies
    compile(group: 'org.springframework.security.oauth', name: 'spring-security-oauth2')
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-redis')


    //configuration retry policy
    compile('org.springframework.retry:spring-retry')
    compile('org.springframework.boot:spring-boot-starter-aop')


    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile('io.searchbox:jest:0.1.6')
    compile('com.fasterxml.jackson.core:jackson-databind')
    compile("org.hibernate:hibernate-validator")


    //paycode security
    compile(group: 'paycode', name: 'core-security', version: '0.0.1.85')
    compile(group: 'paycode', name: 'core-security-resource', version: '0.0.1.31')

    //paycode commons
    compile(group: 'paycode', name: 'core-commons', version: '0.0.1.305')
    compile(group: 'paycode', name: 'core-model', version: '0.0.1.1111-RC')
    compile(group: 'paycode', name: 'core-dto', version: '0.0.1.369')

    //test
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile group: 'junit', name: 'junit', version: '4.10'

    //unit test and mocking service for security
    compile('org.springframework.security:spring-security-test')
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.M3"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}


jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
    applyTo run
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

test.finalizedBy(jacocoTestReport)

group = 'paycode'
task buildDocker(type: Docker, dependsOn: build) {
    //push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}